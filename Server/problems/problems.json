[
    {
        "id": "two-sum",
        "title": "1. Two Sum",
        "difficulty": "Easy",
        "category": "Array",
        "problemStatement": "<p class='mt-3'>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to</em> <code>target</code>.</p><p class='mt-3'>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p class='mt-3'>You can return the answer in any order.</p>",
        "examples": [
            {
                "id": 1,
                "inputText": "nums = [2,7,11,15], target = 9",
                "outputText": "[0,1]",
                "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
            },
            {
                "id": 2,
                "inputText": "nums = [3,2,4], target = 6",
                "outputText": "[1,2]",
                "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
            },
            {
                "id": 3,
                "inputText": " nums = [3,3], target = 6",
                "outputText": "[0,1]"
            }
        ],
        "constraints": "<li class='mt-2'><code>2 ≤ nums.length ≤ 10</code></li> <li class='mt-2'><code>-10 ≤ nums[i] ≤ 10</code></li> <li class='mt-2'><code>-10 ≤ target ≤ 10</code></li><li class='mt-2 text-sm'><strong>Only one valid answer exists.</strong></li>",
        "starterCode": "function twoSum(nums,target){\n  // Write your code here\n};",
        "starterFunctionName": "function twoSum(",
        "order": 1
    },
    {
        "id": "reverse-linked-list",
        "title": "2. Reverse Linked List",
        "difficulty": "Easy",
        "category": "Linked List",
        "problemStatement": "<p class='mt-3'>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>",
        "examples": [
            {
                "id": 0,
                "inputText": "head = [1,2,3,4,5]",
                "outputText": "[5,4,3,2,1]",
                "img": "./images/reverseLL.jpg"
            },
            {
                "id": 1,
                "inputText": "head = [1,2,3]",
                "outputText": "[3,2,1]"
            },
            {
                "id": 2,
                "inputText": "head = [1]",
                "outputText": "[1]"
            }
        ],
        "constraints": "<li class='mt-2'>The number of nodes in the list is the range <code>[0, 5000]</code>.</li><li class='mt-2'><code>-5000 <= Node.val <= 5000</code></li>",
        "starterCode": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n// Do not edit function name\nfunction reverseLinkedList(head) {\n  // Write your code here\n};",
        "starterFunctionName": "function reverseLinkedList(",
        "order": 2
    },
    {
        "id": "jump-game",
        "title": "3. Jump Game",
        "difficulty": "Medium",
        "category": "Array",
        "problemStatement": "<p class='mt-3'>You are given an integer array <code>nums</code>. You are initially positioned at the <strong>first index</strong> and each element in the array represents your maximum jump length at that position.</p><p class='mt-3'>Return <code>true</code> if you can reach the last index, or <code>false</code> otherwise.</p>",
        "examples": [
            {
                "id": 0,
                "inputText": "nums = [2,3,1,1,4]",
                "outputText": "true",
                "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
            },
            {
                "id": 1,
                "inputText": "nums = [3,2,1,0,4]",
                "outputText": "false",
                "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
            }
        ],
        "constraints": "<li class='mt-2'><code>1 <= nums.length <= 10^4</code></li><li class='mt-2'><code>0 <= nums[i] <= 10^5</code></li>",
        "starterCode": "function canJump(nums) {\n  // Write your code here\n};",
        "starterFunctionName": "function canJump(",
        "order": 3
    },
    {
        "id": "valid-parentheses",
        "title": "4. Valid Parentheses",
        "difficulty": "Easy",
        "category": "String",
        "problemStatement": "<p class='mt-3'>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p><p class='mt-3'>An input string is valid if:</p><ul><li class='mt-2'>Open brackets must be closed by the same type of brackets.</li><li class='mt-3'>Open brackets must be closed in the correct order.</li><li class='mt-3'>Every close bracket has a corresponding open bracket of the same type.</li></ul>",
        "examples": [
            {
                "id": 0,
                "inputText": "s = \"()\"",
                "outputText": "true"
            },
            {
                "id": 1,
                "inputText": "s = \"()[]{}\"",
                "outputText": "true"
            },
            {
                "id": 2,
                "inputText": "s = \"(]\"",
                "outputText": "false"
            },
            {
                "id": 3,
                "inputText": "s = \"([)]\"",
                "outputText": "false"
            }
        ],
        "constraints": "<li class='mt-2'><code>1 <= s.length <= 10<sup>4</sup></code></li><li class='mt-2'><code>s</code> consists of parentheses only <code class='text-md'>'()[]{}'</code>.</li>",
        "starterCode": "function validParentheses(s) {\n  // Write your code here\n};",
        "starterFunctionName": "function validParentheses(",
        "order": 4
    },
    {
        "id": "search-a-2d-matrix",
        "title": "5. Search a 2D Matrix",
        "difficulty": "Medium",
        "category": "Array",
        "problemStatement": "<p class='mt-3'>Write an efficient algorithm that searches for a value in an <code>m x n</code> matrix. This matrix has the following properties:</p><ul><li class='mt-3'>Integers in each row are sorted from left to right.</li><li class='mt-3'>The first integer of each row is greater than the last integer of the previous row.</li></ul><p class='mt-3'>Given <code>matrix</code>, an <code>m x n</code> matrix, and <code>target</code>, return <code>true</code> if <code>target</code> is in the matrix, and <code>false</code> otherwise.</p>",
        "examples": [
            {
                "id": 0,
                "inputText": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
                "outputText": "true",
                "img": "./images/search-a-2d-1.jpg"
            },
            {
                "id": 1,
                "inputText": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
                "outputText": "false",
                "img": "./images/search-a-2d-2.jpg"
            },
            {
                "id": 2,
                "inputText": "matrix = [[1]], target = 1",
                "outputText": "true"
            }
        ],
        "constraints": "<li class='mt-2'><code>m == matrix.length</code></li><li class='mt-2'><code>n == matrix[i].length</code></li><li class='mt-2'><code>1 <= m, n <= 100</code></li><li class='mt-2'><code>-10<sup>4</sup> <= matrix[i][j], target <= 10<sup>4</sup></code></li>",
        "starterCode": "function searchMatrix(matrix, target) {\n  // Write your code here\n};",
        "starterFunctionName": "function searchMatrix(",
        "order": 5
    }
]